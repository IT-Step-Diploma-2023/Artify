001
GET     /UsersApi/GetCurrentUserData
PAGE    /settings-basicinfo

Description
-----------
Get a basic user information -> Done

Response
-----------
Status: 200 OK
{
    "id": ,
    "userName": , // means login
    "fullName": , // should be added to model
    "email":,
    "location": ,
    "info": ,
    "logoImage":
}

************

002
GET  /GetUserProfInfo
PAGE /settings-profinfo

Description
-----------
Get information about profession, skills and education

Response
-----------
Status: 200 OK
{                               // WorkPreference model
    "skills":,
    "educations": [
        {                       // Education model
            "id": ,
            "degree": ,
            "institution": ,
            "startYear": ,
            "finisYear": ,
        }
    ],
    "specialties": [            
        {                       // Specialty model
            "id": ,
            "name": 
        }
    ],
    "jobs": [
        {                       // Job model
            "id": ,
            "position": ,
            "company": ,
            "startYear": ,
            "finisYear": 
        }
    ],
    "webSite":
}

************

003
GET /settings-networks

Description
-----------
Get information user social networks
The list of social networks is constant 
Each address can be set to exact value or be empty

Response
-----------
Status: 200 OK
{
    "socialProfiles": [
        {
            "name": ,
            "address": 
        }
    ]
}


************

004
POST /settings-networks/update

Description
-----------
Update user social network
The list of social networks is constant 
Each address can be set to exact value or be empty

Payload 
-----------
{
    "socialProfiles": [
        {
            "name": ,
            "address": 
        }
    ]
}

Response
-----------
Status: 200 OK
redirect to /settings-networks

************

005
POST /AddProject

Description
-----------
Creating a new 'Shot' that contains uploaded 'Images'
Incapsulating 'Shot' inside 'Project' with adding text description

Payload
-----------
    "title": ,
    "createDateTime": , 
    "description": ,
    "shot": {
        "title": ,
        "createDateTime": ,
        "genres": [
            "name": ,
        ],
        "images": [
           
        ], 
        "tags":[
            "name": 
        ]
    }


Response
-----------
Status: 200 OK
redirect to /portfolio

************

006
GET /ShotsApi/GetShots

Description
-----------
Authorization: NO
For use on HomePage
Get array of 10 Shots // number will be begger after increasing records quantity
// Next we`ll have add filters by genre, tags, author, appreciations quantity

Response
-----------
Status: 200 OK
{
    [
        "shot": {
            "id": ,
            "user": {
                // user filds
            },
            "title": ,
            "createDateTime": ,
            "genres": [],
            "images": [], 
            "tags":[],
            "appreciations":[],
            "comments":[],
            "albums":[],
            "projects": []
        }
    ]
}

************

007
POST /UsersApi/UpdateUserSocialProfiles

Description
-----------
Create (or update) UserSocialProfiles
use the name of social profile to get it Id in SocialProfiles table
create new or update existing UserSocialProfile using Id and address
return created or updated UserSocialProfile

Payload
-----------
{
    "userSocialProfiles": [
        "socialProfile": {
            "name":,
            "address"
        }
    ]
}

Response
-----------
Status: 200 OK
{
    "userSocialProfiles": [
        "socialProfile": {
            "name":,
            "address"
        }
    ]
}

************

008
POST /UsersApi/UpdateWorkPreferences

Description
-----------
Create (or update) user`s  WorkPreference and WebSite
return updated or created user`s  WorkPreference and WebSite

Payload
-----------
{
    "workPreference": {
        "skills": ,
        "educations": [
            education: {
                "id": ,
                "degree": ,
                "institution": ,
                "startYear": ,
                "finisYear": ,
            }
        ],
        "specialties": [
            specialty: {
                "id": ,
                "name": 
            }
        ],
        "jobs": [
            "id": ,
            "position": ,
            "company": ,
            "startYear": ,
            "finisYear": 
        ]
    }
    "webSite":
}

Response
-----------
Status: 200 OK
{
    "workPreference": {
        "skills": ,
        "educations": [
            education: {
                "id": ,
                "degree": ,
                "institution": ,
                "startYear": ,
                "finisYear": ,
            }
        ],
        "specialties": [
            specialty: {
                "id": ,
                "name": 
            }
        ],
        "jobs": [
            "id": ,
            "position": ,
            "company": ,
            "startYear": ,
            "finisYear": 
        ]
    }
    "webSite":
}

************

008
PUT /UsersApi/UpdateCurrentUser

Description
-----------
Update user`s basic info
return updated user`s basic info

Payload
-----------
{
    "userName": , // means login
    "fullName": ,
    "email":,
    "location": ,
    "info": ,
    "logoImage": // image as Blob
}

Response
-----------
Status: 200 OK
{
    "userName": , // means login
    "fullName": ,
    "email":,
    "location": ,
    "info": ,
    "logoImage": // path as string
}

/////////////////////////////////
add new model Portfolio
or rename Project to Portfolio

public class Portfolio
{
    [Key]
    public int Id { get; set; }
    [Required]
    public int UserId { get; set; } // UserDTO created Follower

    [Required]
    [DataType(DataType.DateTime)]
    public DateTime CreatedDateTime { get; set; }
    // NAVIGATION PROPERTIES
    [ForeignKey(nameof(UserId))]
    public virtual User User { get; set; } = null!;
    public virtual List<Shot> Shots { get; set; } = new();
}

/////////////////////////////////
add properties to Album

[Required]
public bool IsPublic { get; set;}

public string Title { get; set; } = string.Empty;


GET /ShotsApi/GetPortfolio?userId=[userId] // userId of portfolio`s owner, if current user is not owner

Description
-----------
Authorization: NO
For use in User Profile PAGE

Response
-----------
Status: 200 OK
"portfolio": [                      // Portfolio.UserId == UserId               
    "shot": {
        "shotId":,
        "coverImage":
    }
]

GET /ShotsApi/GetAlbums?userId=[userId] // userId of album`s owner, if current user is not owner
Description
-----------
Authorization: NO
For use in User Profile PAGE

Response
-----------
Status: 200 OK
"albums": [                           // Album.UserId == UserId
    "shot": {
        "shotId":,
        "coverImage":
    }
]

GET /ShotsApi/GetAppreciations?userId=[userId] // userId of appreciation`s owner, if current user is not owner
Description
-----------
Authorization: NO
For use in User Profile PAGE

Response
-----------
Status: 200 OK
"appreciations": [                           // Appreciation.UserId == UserId
    "shot": {
        "shotId":,
        "coverImage":
    }
]

GET /users/UsersApi/GetFollowings?userId=[userId] // userId of profile`s owner, if current user is not owner
Description
-----------
Authorization: NO
For use in User Profile PAGE

Response
-----------
Status: 200 OK
"followings": [                           // Appreciation.UserId == UserId
    "user": {
        "userId":,
        "username":,
        "fullName":,
        "logoImage":,
        "specialties":[
            "name":
        ]
    }
]





